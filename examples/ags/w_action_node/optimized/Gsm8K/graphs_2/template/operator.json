{
    "Custom": {
        "description": "Generates anything based on customized input and instruction.",
        "interface": "custom(input: str, instruction: str) -> dict with key 'response' of type str"
    },
    "Generate": {
        "description": "Generates solution based on a problem description.",
        "interface": "generate(problem: str) -> dict with key 'response' of type str"
    },
    "ContextualGenerate": {
        "description": "Generates solution based on a problem description.",
        "interface": "contextual_generate(problem: str, context: str) -> dict with key 'response' of type str"
    },
    "CodeGenerate": {
        "description": "Generates code based on a problem description and function name.",
        "interface": "code_generate(problem: str, function_name: str) -> dict with key 'code' of type str"
    },
    "CodeContextualGenerate": {
        "description": "Generates code based on a problem description, context, and function name.",
        "interface": "code_contextual_generate(problem: str, thought: str, function_name: str) -> dict with key 'code' of type str"
    },
    "Format": {
        "description": "Formats a given solution based on the problem.",
        "interface": "format(problem: str, solution: str) -> dict with key 'solution' of type str"
    },
    "Review": {
        "description": "Reviews a solution based on problem description and criteria.",
        "interface": "review(problem: str, solution: str) -> dict with key 'review_result' of type bool and key 'feedback' of type str"
    },
    "Revise": {
        "description": "Revises a solution based on problem description, solution, and review's feedback.",
        "interface": "revise(problem: str, solution: str, feedback: str) -> dict with key 'solution' of type str"
    },
    "FuEnsemble": {
        "description": "Critically evaluates multiple solutions and synthesizes an enhanced integrated solution.",
        "interface": "fu_ensemble(solutions: List[str], problem: str) -> dict with key 'solution' of type str"
    },
    "MdEnsemble": {
        "description": "Uses multiple votes to choose the best solution from a set of candidate solutions.",
        "interface": "md_ensemble(solutions: List[str], problem: str) -> dict with key 'solution' of type str"
    },
    "CodeEnsemble": {
        "description": "Evaluates and selects the best code solution from multiple candidates.",
        "interface": "code_ensemble(solutions: List[dict], problem: str) -> dict with key 'solution' of type str"
    },
    "ScEnsemble": {
        "description": "Uses self-consistency to improve the selection of the best solution.",
        "interface": "sc_ensemble(solutions: List[str], problem: str) -> dict with key 'solution' of type str"
    },
    "Rephrase": {
        "description": "Rephrases a problem description.",
        "interface": "rephrase(problem: str) -> dict with key 'rephrased_problem' of type str"
    },
    "Test": {
        "description": "Executes a solution and tests it with provided test cases. Revises the solution if necessary.",
        "interface": "test(problem_id: str, problem: str, rephrase_problem: str, solution: dict, test_cases: List[str], entry_point: str, test_loop: int) -> dict with key 'solution' of type str"
    }
}
